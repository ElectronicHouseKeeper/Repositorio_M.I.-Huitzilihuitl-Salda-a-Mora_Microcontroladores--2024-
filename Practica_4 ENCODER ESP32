#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
Adafruit_SSD1306 display (128, 64, 23, 18, 16, 17, 5); //ESP32
int SALIDAS_PUERTO[]  = {32, 33, 25, 26, 27, 14};
int ENTRADAS[] = {12, 13, 35, 34, 15, 2};
int Tiempo = 90;
int lectura1; //definimos la variable lectura1 de tipo entero
int lectura2; //definimos la variable lectura2 de tipo entero
int variable = 0; //definimos variable y le damos un valor cero
int resta = 1; // definimos variable resta y le damos un valor de uno
int suma = 1; // definimos variable resta y le damos un valor de uno
const unsigned char ABB_MONO [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0xf0, 0x00, 0x07, 0xc1, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x8f, 0xf0, 0x1c, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x80, 0x7f, 0x70, 0x00, 0x06, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0xc2, 0x07, 0xe0, 0x00, 0x03, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x60, 0x60, 0x00, 0x80, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x30, 0x1c, 0x00, 0x49, 0x00, 0x00, 0x70, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x18, 0x06, 0x00, 0x08, 0x00, 0x0f, 0x81, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x08, 0x03, 0x01, 0x00, 0x7c, 0x30, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x0c, 0x01, 0x3f, 0x00, 0x7e, 0x60, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x06, 0x01, 0x7f, 0x80, 0xfe, 0x40, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x02, 0x01, 0x3f, 0x89, 0xfe, 0x40, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x03, 0x00, 0x3f, 0x91, 0xfe, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x01, 0xc0, 0x1f, 0x81, 0xf8, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x81, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x3c, 0x00, 0x00, 0x01, 0x9f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x03, 0xc0, 0x00, 0x3f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x01, 0x3f, 0xff, 0xf0, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x01, 0x1e, 0xe0, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x01, 0x80, 0x00, 0x01, 0x98, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xc0, 0x00, 0x07, 0x8c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xe0, 0x00, 0x1d, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x01, 0x98, 0x00, 0xcd, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x03, 0x8f, 0x81, 0x99, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x03, 0x4b, 0x9f, 0x19, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x03, 0x72, 0x68, 0x2c, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x03, 0x92, 0x48, 0x4c, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x01, 0xd0, 0x48, 0xdf, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x03, 0x7c, 0x09, 0x9e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x01, 0xf8, 0x0b, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x60, 0x88, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x20, 0x88, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x20, 0x88, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x70, 0x88, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x60, 0x88, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x60, 0x88, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x78, 0xc8, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x3f, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};
const unsigned char ABB [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7d, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0xff, 0xff, 0xff, 0xff, 0x4c, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x26, 0x92, 0x4d, 0xb2, 0x49, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x2c, 0xff, 0xff, 0x80, 0x0f, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x8c, 0xa7, 0xf9, 0x80, 0x05, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0xb8, 0xa4, 0x09, 0x80, 0x01, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe1, 0x01, 0x80, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa1, 0x03, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa1, 0x07, 0xc0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe1, 0x0f, 0xe0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa1, 0x1f, 0xf0, 0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0xa1, 0x1f, 0xf0, 0x11, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x02, 0xa0, 0xe1, 0x1f, 0xf1, 0x03, 0x05, 0x40, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x02, 0xe0, 0xa1, 0x0f, 0xf0, 0x01, 0x07, 0x40, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0xa0, 0xa1, 0x07, 0xe0, 0x01, 0x05, 0xc0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0xe1, 0x00, 0x00, 0x03, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa6, 0x18, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa3, 0xfa, 0xc0, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x02, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x02, 0x7f, 0xe5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x02, 0x40, 0x15, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x02, 0xc0, 0xc0, 0x02, 0x40, 0x0f, 0x03, 0x40, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0xa0, 0x80, 0x00, 0x58, 0xd5, 0x05, 0xc0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x02, 0xa0, 0x80, 0x00, 0x60, 0x05, 0x05, 0x40, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0xc0, 0x00, 0x40, 0x07, 0x05, 0x40, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x80, 0x00, 0x00, 0x05, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0xc1, 0x20, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x82, 0x4c, 0x00, 0x85, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe2, 0x00, 0x08, 0x8f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0xfc, 0x90, 0x4f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x67, 0xd8, 0x80, 0x16, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x8c, 0x34, 0x82, 0x9f, 0xfc, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x1b, 0x38, 0xbf, 0xd8, 0x2c, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x7a, 0x0f, 0xce, 0xf3, 0xf0, 0x5a, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xc0, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x07, 0xe0, 0x00, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x01, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x0c, 0x0c, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x01, 0x78, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};
void setup() {
  //Salidas(0B000000);
  Serial.begin(9600);
  display.begin(SSD1306_SWITCHCAPVCC);
  pinMode(12 , INPUT_PULLUP);
  pinMode(13 , INPUT_PULLUP);
  pinMode(35 , INPUT);
  pinMode(34 , INPUT);
  pinMode(15 , INPUT_PULLUP);
  pinMode(4  , INPUT_PULLUP);
  pinMode(39 , INPUT);
  pinMode(36 , INPUT);
  Serial.begin(9600);
  for (int i = 0; i < 6; i++)
  {
    pinMode(SALIDAS_PUERTO[i], OUTPUT);
  }
  display.clearDisplay();
  display.drawBitmap(0  , 10, ABB_MONO, 128, 64, WHITE);
  display.drawBitmap(30 , 5, ABB,      128, 64, WHITE);
  display.display();
  delay(1000);
  display.clearDisplay();
  display.setTextSize(1);
  //display.setFont(&FreeSansBold12pt7b));
  display.setTextColor(WHITE);
  display.setCursor(6, 0);
  display.println("-MICROCONTROLADORES-");
  display.display();
  display.setTextSize(1);
  //display.setFont(&FreeSansBold12pt7b));
  display.setTextColor(WHITE);
  display.setCursor(8, 10);
  display.println("-HUITZILIHUITL-");
  display.drawLine(0, 20, 150, 20, WHITE);
  display.display();
  delay(1000);
  display.clearDisplay();
  display.display();
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(8, 0);
  display.println("-JESUS_EMMANUEL-");
  display.display();
  display.setTextSize(1);
  //display.setFont(&FreeSansBold12pt7b));
  display.setTextColor(WHITE);
  display.setCursor(8, 10);
  display.println("-JORGE_ALBERTO-");
  display.drawLine(0, 20, 150, 20, WHITE);
  display.display();
  delay(1000);
  //Salidas(0B000000);
  display.clearDisplay();
  display.display();
  display.setTextSize(1);
  //display.setFont(&FreeSansBold12pt7b));
  display.setTextColor(WHITE);
  display.setCursor(25, 0);
  display.println("-PRACTICA_4-");
  display.display();
  display.setTextSize(1);
  //display.setFont(&FreeSansBold12pt7b));
  display.setTextColor(WHITE);
  display.setCursor(25, 10);
  display.println("-ENCODER-");
  display.drawLine(0, 20, 150, 20, WHITE);
  display.display();
  delay(1000);
  display.clearDisplay();
  display.display();
  display.drawCircle(10, 40, 7, WHITE);
  display.drawCircle(30, 40, 7, WHITE);
  display.drawCircle(50, 40, 7, WHITE);
  display.drawCircle(80, 40, 7, WHITE);
  display.drawCircle(100, 40, 7, WHITE);
  display.drawCircle(120, 40, 7, WHITE);
  display.display();
}

void loop() {
estado1: //s1
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(0, 0);
  display.println("-S1-");
  display.setTextColor(WHITE);
  display.setCursor(100, 10);
  display.println(variable);
  display.drawCircle(10, 40, 7, WHITE);
  display.drawCircle(30, 40, 7, WHITE);
  display.drawCircle(50, 40, 7, WHITE);
  display.drawCircle(80, 40, 7, WHITE);
  display.drawCircle(100, 40, 7, WHITE);
  display.drawCircle(120, 40, 7, WHITE);
  display.setTextSize(1);
  display.display();
  lectura1 = analogRead (34); //DEFINIMOS UNA VARIABLE DE TIPO ENTERO LA CUAL TOMARA LECTURA DEL PIN ANALOGICO 0
  lectura2 = analogRead (32); //DEFINIMOS UNA VARIABLE DE TIPO ENTERO LA CUAL TOMARA LECTURA DEL PIN ANALOGICO 0
  if (lectura1 < 800 && lectura2 < 800 )goto estado1; //si ninguno recibe señal se queda en el estado 1
  if (lectura1 > 800 && lectura2 < 800 )goto estado2; //si lectura 1 recibe señal avanza a s2
  if (lectura1 < 800 && lectura2 > 800 )goto estado5; //si lectura 2 recibe señal avanza a s6
  goto estado1;

estado2:
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(0, 0);
  display.println("-S2-");
  display.setTextColor(WHITE);
  display.setCursor(100, 10);
  display.println(variable);
  display.drawCircle(10, 40, 7, WHITE);
  display.drawCircle(30, 40, 7, WHITE);
  display.drawCircle(50, 40, 7, WHITE);
  display.fillCircle(80, 40, 7, WHITE);
  display.drawCircle(100, 40, 7, WHITE);
  display.drawCircle(120, 40, 7, WHITE);
  display.display();
  lectura1 = analogRead (34); //DEFINIMOS UNA VARIABLE DE TIPO ENTERO LA CUAL TOMARA LECTURA DEL PIN ANALOGICO 0
  lectura2 = analogRead (32); //DEFINIMOS UNA VARIABLE DE TIPO ENTERO LA CUAL TOMARA LECTURA DEL PIN ANALOGICO 0
  if (lectura1 > 800 && lectura2 > 800 )goto estado1; //si no reciben señal se regresa a estado 1 // 00
  if (lectura1 > 800 && lectura2 < 800 )goto estado2; // si lectura 1 recibe señal se queda en estado 2 // 01
  if (lectura1 < 800 && lectura2 < 800 )goto estado3; // si ninguno recibe señal avanza a estado 3 // 11
  goto estado2;
estado3:
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(0, 0);
  display.println("-S3-");
  display.setTextColor(WHITE);
  display.setCursor(100, 10);
  display.println(variable);
  display.drawCircle(10, 40, 7, WHITE);
  display.drawCircle(30, 40, 7, WHITE);
  display.drawCircle(50, 40, 7, WHITE);
  display.fillCircle(80, 40, 7, WHITE);
  display.fillCircle(100, 40, 7, WHITE);
  display.drawCircle(120, 40, 7, WHITE);
  display.display();
  lectura1 = analogRead (34); //DEFINIMOS UNA VARIABLE DE TIPO ENTERO LA CUAL TOMARA LECTURA DEL PIN ANALOGICO 0
  lectura2 = analogRead (32); //DEFINIMOS UNA VARIABLE DE TIPO ENTERO LA CUAL TOMARA LECTURA DEL PIN ANALOGICO 0
  if (lectura1 < 800 && lectura2 > 800 )goto estado4; //si lectura 2 recibe señal avanza a estado 4
  if (lectura1 > 800 && lectura2 < 800 )goto estado2; //si lectura 1 recibe señal avanza a estado 2
  if (lectura1 < 800 && lectura2 < 800 )goto estado3; //si ninguno recibe señal se queda en estado 3
  goto estado3;

estado4:
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(0, 0);
  display.println("-S4-");
  display.setTextColor(WHITE);
  display.setCursor(100, 10);
  display.println(variable);
  display.drawCircle(10, 40, 7, WHITE);
  display.drawCircle(30, 40, 7, WHITE);
  display.drawCircle(50, 40, 7, WHITE);
  display.fillCircle(80, 40, 7, WHITE);
  display.fillCircle(100, 40, 7, WHITE);
  display.fillCircle(120, 40, 7, WHITE);
  display.display();
  
  lectura1 = analogRead (34); //DEFINIMOS UNA VARIABLE DE TIPO ENTERO LA CUAL TOMARA LECTURA DEL PIN ANALOGICO 0
  lectura2 = analogRead (32); //DEFINIMOS UNA VARIABLE DE TIPO ENTERO LA CUAL TOMARA LECTURA DEL PIN ANALOGICO 0
  if (lectura1 > 800 && lectura2 > 800 ){variable = variable + 1;goto estado1;} //si no reciben señal se regresa a estado 1 // 00
  if (lectura1 < 800 && lectura2 > 800 ) goto estado4; // si lectura 1 recibe señal se queda en estado 2 // 01
  if (lectura1 > 800 && lectura2 < 800 ) goto estado3; // si ninguno recibe señal avanza a estado 3 // 11

estado5:
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(0, 0);
  display.println("-S5-");
  display.setTextColor(WHITE);
  display.setCursor(100, 10);
  display.println(variable);
  display.fillCircle(10, 40, 7, WHITE);
  display.drawCircle(30, 40, 7, WHITE);
  display.drawCircle(50, 40, 7, WHITE);
  display.drawCircle(80, 40, 7, WHITE);
  display.drawCircle(100, 40, 7, WHITE);
  display.drawCircle(120, 40, 7, WHITE);
  display.display();
  lectura1 = analogRead (34); //DEFINIMOS UNA VARIABLE DE TIPO ENTERO LA CUAL TOMARA LECTURA DEL PIN ANALOGICO 0
  lectura2 = analogRead (32); //DEFINIMOS UNA VARIABLE DE TIPO ENTERO LA CUAL TOMARA LECTURA DEL PIN ANALOGICO 0
  if (lectura1 > 800 && lectura2 > 800 )goto estado1; //si los dos recieb señal regresa a estado 1
  if (lectura1 < 800 && lectura2 > 800 )goto estado5; //si lectura 2 recibe señal se queda en estado 5
  if (lectura1 < 800 && lectura2 < 800 )goto estado6; // si ninguno recibe señal avanza a estado 6
  goto estado5;

estado6:
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(0, 0);
  display.println("-S6-");
  display.setTextColor(WHITE);
  display.setCursor(100, 10);
  display.println(variable);
  display.fillCircle(10, 40, 7, WHITE);
  display.fillCircle(30, 40, 7, WHITE);
  display.drawCircle(50, 40, 7, WHITE);
  display.drawCircle(80, 40, 7, WHITE);
  display.drawCircle(100, 40, 7, WHITE);
  display.drawCircle(120, 40, 7, WHITE);
  display.display();
  lectura1 = analogRead (34); //DEFINIMOS UNA VARIABLE DE TIPO ENTERO LA CUAL TOMARA LECTURA DEL PIN ANALOGICO 0
  lectura2 = analogRead (32); //DEFINIMOS UNA VARIABLE DE TIPO ENTERO LA CUAL TOMARA LECTURA DEL PIN ANALOGICO 0
  if (lectura1 > 800 && lectura2 < 800 )goto estado7; //si lectura 1 recibe señal avanza a estado 7
  if (lectura1 < 800 && lectura2 > 800 )goto estado5; // si lectura 2 recibe señal avanza a estado 5
  if (lectura1 < 800 && lectura2 < 800 )goto estado6; // si ninguno recibe señal se queda en estado 6

  goto estado6;
estado7:
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(0, 0);
  display.println("-S7-");
  display.setTextColor(WHITE);
  display.setCursor(100, 10);
  display.println(variable);
  display.fillCircle(10, 40, 7, WHITE);
  display.fillCircle(30, 40, 7, WHITE);
  display.fillCircle(50, 40, 7, WHITE);
  display.drawCircle(80, 40, 7, WHITE);
  display.drawCircle(100, 40, 7, WHITE);
  display.drawCircle(120, 40, 7, WHITE);
  display.display();
  lectura1 = analogRead (34); //DEFINIMOS UNA VARIABLE DE TIPO ENTERO LA CUAL TOMARA LECTURA DEL PIN ANALOGICO 0
  lectura2 = analogRead (32); //DEFINIMOS UNA VARIABLE DE TIPO ENTERO LA CUAL TOMARA LECTURA DEL PIN ANALOGICO 0
  if (lectura1 > 800 && lectura2 < 800  ){goto estado7;}//si no reciben señal se regresa a estado 1 // 00 
  if (lectura1 > 800 && lectura2 > 800){variable = variable - 1;goto estado1;} // si lectura 1 recibe señal se queda en estado 2 // 01
  if (lectura1 < 800 && lectura2 < 800 )goto estado6; // si ninguno recibe señal avanza a estado 3 // 11
  goto estado7;
}
